class TiberiumRadiationThinker : Thinker
{
	Sector ActiveSec;
	Array<TiberiumCrystal> Crystals;
	bool IsBlue;

	private int DamageTicker;

	override void Tick()
	{
		Super.Tick();
		for (int i = 0; i < Crystals.Size(); ++i)
		{
			if (!Crystals[i])
			{
				Crystals.Delete(i--);
			}
		}

		int crystalCount = Crystals.Size();
		if (crystalCount == 0)
		{
			Destroy();
			return;
		}

		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (!players[i].mo || players[i].mo.CurSector != ActiveSec || players[i].mo.Health <= 0 || players[i].mo.pos.z > players[i].mo.floorz + 64)
			{
				continue;
			}

			bool hasRadsuit = players[i].mo.FindInventory('WornRadsuit') != null;
			int damFreq = int(max(20, 70 - crystalCount * (IsBlue ? 1.5 : 1)));

			if (++DamageTicker >= damFreq * (hasRadsuit ? 3 : 1))
			{
				DamageTicker = 0;

				// [Ace] This will occasionally cause bleeding.
				players[i].mo.DamageMobj(null, null, int((hasRadsuit ? randompick(1, 1, 1, 2) : random(8, 12)) * (IsBlue ? 1.5 : 1.0)), 'Tiberium', DMG_NO_FACTOR | DMG_NO_ARMOR);

				let hdplr = HDPlayerPawn(players[i].mo);
				if (hdplr)
				{
					if (hasRadsuit)
					{
						hdplr.burncount += IsBlue ? randompick(0, 0, 1, 1, 1, 1, 2, 2, 3) : randompick(0, 0, 0, 0, 1, 1, 1, 2);
					}
					else
					{
						hdplr.burncount += IsBlue ? randompick(2, 2, 2, 3, 3, 4) : randompick(1, 1, 1, 2, 2, 3);
					}
				}
			}
		}
	}
}

extend class MerchantHandler
{
	// [Ace] These are the opposite of healing crystals, so keep soccer moms away.
	private void SpawnCrystals(Sector s)
	{
		bool isBlue = !random(0, 6); // [Ace] Holy crystal batman, we're rich!

		double size, avgSize;
		[size, avgSize] = AceCore.GetSectorSize(s);

		double scaleFac = max(1.0, isBlue ? TiberiumCrystal.BlueScale : frandom[merchrand](0, 2.0));
		int totalCrystalHealth = int(size * scaleFac);
		int originalTotal = totalCrystalHealth;

		// [Ace] I'm not using a for loop because it can potentially result in fewer than the real number of crystals to spawn.
		int tries = 0;
		TiberiumRadiationThinker tibThonk = null;

		int lowest = int.max, average = 0, highest = 0;
		while (totalCrystalHealth > 0 && tries < 5000) // [Ace] If 5000 tries dont't do it, it's likely a super tiny sector OR it's a control sector. Fringe cases probably can't be handled too well.
		{
			double angle = random(0, 359);
			double dist = frandom(0, size);
			vector3 adjPos = (s.centerspot + (dist * cos(angle), dist * sin(angle)), s.floorplane.ZAtPoint(s.centerspot));
			if (level.IsPointInLevel(adjPos) && level.PointInSector(adjPos.xy) == s)
			{
				// [Ace] If the crystal is in the sector, force move it towards the center a little so it doesn't spawn right inside the wall. Then check again after adjustment.
				adjPos.xy -= (14 * cos(angle), 14 * sin(angle));
				if (level.IsPointInLevel(adjPos) && level.PointInSector(adjPos.xy) == s)
				{
					TiberiumCrystal tib = TiberiumCrystal(Actor.Spawn('TiberiumCrystal', adjPos));
					tib.IsBlue = isBlue;
					tib.Health = int(min(totalCrystalHealth, min(tib.default.health, random[merchrand](50, tib.default.health * 2)) * (isBlue ? tib.BlueScale : 1)));
					if (!tibThonk)
					{
						tibThonk = new('TiberiumRadiationThinker');
						tibThonk.ActiveSec = s;
						tibThonk.IsBlue = isBlue;
					}
					tibThonk.Crystals.Push(tib);
					totalCrystalHealth -= tib.Health;

					if (tib.Health < lowest)
					{
						lowest = tib.Health;
					}
					if (highest < tib.Health)
					{
						highest = tib.Health;
					}
					average += tib.Health;
				}
			}
			tries++;
		}

		int crystalCount = tibThonk ? tibThonk.Crystals.Size() : 0;
		if (crystalCount > 0)
		{
			average /= crystalCount;
		}

		if (hdm_debug > 0)
		{
			Console.Printf("--------------------\nSpawned "..(isBlue ? "\c[Blue]" : "\c[Green]").."%i\c- crystals. Remaining health: \c[Red]%i\c- out of \c[Red]%i\c- (x \c[Red]%.2f\c-). Low/avg/high: \c[Red]%i\c-/\c[Red]%i\c-/\c[Red]%i\c-.\nSector @\c[DarkGray]%i\c-, \c[DarkGray]%i\c- size/avg is \c[Brick]%i\c-/\c[Brick]%i\c-. Took \c[Gold]%i\c- tries.",
				crystalCount, totalCrystalHealth, originalTotal, scaleFac, lowest, average, highest, s.centerspot.x, s.centerspot.y, size, avgSize, tries);
		}
	}
}

class TiberiumCrystal : Actor
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		NextDropAmount = NextDropAt = int(min(Health, frandom(20, 100) * (IsBlue ? BlueScale : 1)));
		if (IsBlue)
		{
			SetShade(0x3388FF);
		}
		bXFLIP = true;
		A_GiveInventory('ImmunityToFire');
	}

	private void DropChunk(int amt)
	{
		// [Ace] Drop what exactly?
		if (amt == 0)
		{
			return;
		}

		TiberiumChunk chonk = TiberiumChunk(Spawn('TiberiumChunk', pos));
		chonk.Amount = amt;
		chonk.angle = random(0, 359);
		chonk.A_ChangeVelocity(frandom(1.5, 4.0), 0, frandom(2.0, 6.0), CVF_RELATIVE | CVF_REPLACE);
		chonk.IsBlue = IsBlue;
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		int dmg = 0;
		if (mod == 'Chainsaw')
		{
			dmg = Super.DamageMobj(inflictor, source, damage / 5, mod, flags, angle);
			NextDropAt -= dmg;

			double pitch = frandom(-85.0, 85.0);
			bool success; Actor a;
			[success, a] = A_SpawnItemEx('HDSmoke', frandom(0, radius), 0,  frandom(0, height), frandom(1, 3) * cos(pitch), 0, frandom(1, 3) * sin(pitch), random(0, 359), SXF_NOCHECKPOSITION);
			a.scale = (0.6, 0.6) * frandom(0.75, 1.2);
			a.A_SetRenderStyle(1.25, STYLE_AddShaded);
			a.SetShade(IsBlue ? 0x3388FF : 0x22FF00);
		}
		else
		{
			dmg = Super.DamageMobj(inflictor, source, damage / 6, mod, flags, angle);
			NextDropAt -= dmg / 3; // [Ace] This essentially guarantees that the crystal will be destroyed before it can spawn its full worth in chunks.
		}

		if (NextDropAt <= 0)
		{
			DropChunk(NextDropAmount);
			Leftovers += abs(NextDropAt);
			NextDropAmount = NextDropAt = int(min(Health, frandom(20, 100) * (IsBlue ? BlueScale : 1)));
		}

		if (Health <= 0)
		{
			DropChunk(Leftovers);
		}

		return dmg;
	}

	const BlueScale = 3.0;
	bool IsBlue;
	private int NextDropAt;
	private int NextDropAmount;
	private int Leftovers;

	Default
	{
		Radius 14;
		Height 40;
		Health 300;
		Mass 50000;
		+SOLID
		+SHOOTABLE
		+DONTTHRUST
		+NOBLOOD
		Scale 0.5;
		StencilColor "66FF44";
	}

	States
	{
		RegisterSprites:
			TIBG A 0; TIBB A 0;

		Spawn:
			TIBG A 3
			{
				if (IsBlue)
				{
					sprite = GetSpriteIndex("TIBB");
				}

				double healthFac = Health / double(default.Health * (IsBlue ? BlueScale : 1));
				if (healthFac < 0.75) { frame++; height = 30; }
				if (healthFac < 0.33) { frame++; height = 20; }

				if (random(1, 100) <= 40)
				{
					double mult = 3 - frame;
					for (int i = 0; i < 8; ++i)
					{
						A_SpawnParticle(fillcolor, SPF_RELATIVE | SPF_FULLBRIGHT, random(20, 45), frandom(3, 5) * mult, random(0, 359), 10 + 2 * mult, 0, frandom(10, height), frandom(0.05, 0.4) * mult, accelz: -0.0075 * mult);
					}
				}
			}
			Loop;
		Death:
			TNT1 A 1;
			Stop;
	}
}

class TiberiumChunk : HDUPK
{
	override void PostBeginPlay()
	{
		RollDirection = randompick(-1, 1);
		if (IsBlue)
		{
			SetShade(0x3388FF);
			MaxUnitAmount = int(MaxUnitAmount * TiberiumCrystal.BlueScale);
		}
		Super.PostBeginPlay();
	}

	// [Ace] Not being able to backpack crystals directly is completely intentional.
	override void A_HDUPKGive()
	{
		AceCore.GiveToPlayers('MercenaryBucks', Amount);

		picktarget.A_StartSound(pickupsound, 5);
		HDPickup.LogPickupMessage(picktarget, "Picked up a chunk of Tiberium worth "..(IsBlue ? "\c[Blue]" : "\c[Green]").."$"..Amount.."\c-.");
		
		bool hasRadsuit = picktarget.FindInventory('WornRadsuit') != null;
		picktarget.DamageMobj(self, self, int(max(3, frandom(Amount * 0.1, Amount * 0.25) / (hasRadsuit ? 6 : 1))), 'Tiberium', DMG_NO_FACTOR | DMG_NO_ARMOR);
		let hdplr = HDPlayerPawn(picktarget);
		if (hdplr)
		{
			if (hasRadsuit)
			{
				if (random(1, 100) <= Amount)
				{
					hdplr.burncount++;
				}
			}
			else
			{
				hdplr.burncount += max(2, Amount / (IsBlue ? 5 : 10));
			}
		}
		Destroy();
	}

	bool IsBlue;
	int RollDirection;

	Default
	{
		BounceType "Doom";
		BounceFactor 0.6;
		BounceCount 8;
		HDUPK.MaxUnitAmount 100;
		+MISSILE
		+EXPLODEONWATER
		+ROLLSPRITE
		+ROLLCENTER
		Scale 0.4;
		StencilColor "66FF44";
		BounceSound "Tiberium/Bounce";
	}

	States
	{
		RegisterSprites:
			TBCG A 0; TBCB A 0;

		Spawn:
			TBCG A 5 NoDelay
			{
				if (IsBlue)
				{
					sprite = GetSpriteIndex("TBCB");
				}
				roll += 30 * RollDirection;

				double amtFac = Amount / double(MaxUnitAmount);
				if (amtFac < 0.75) { frame++; }
				if (amtFac < 0.33) { frame++; }
			}
			Loop;
		Death:
			#### # 0
			{
				A_StartSound(bouncesound);
				roll = randompick(0, 180);
			}
		DeathLoop:
			#### # 3
			{
				if (random(1, 100) <= 40)
				{
					double mult = 3 - frame;
					for (int i = 0; i < 5; ++i)
					{
						A_SpawnParticle(fillcolor, SPF_RELATIVE | SPF_FULLBRIGHT, random(10, 30), frandom(1.5, 2.5) * mult, random(0, 359), 2 * mult, 0, frandom(0.0, 2.0 * mult), frandom(0.05, 0.25) * mult);
					}
				}
			}
			Loop;
	}
}